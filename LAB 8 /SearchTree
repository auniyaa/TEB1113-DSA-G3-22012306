#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class Node {
public:
    string name;
    Node* left;
    Node* right;

    Node(string n) {
        name = n;
        left = nullptr;
        right = nullptr;
    }
};

class Tree {
public:
    Node* root;

    Tree() {
        root = nullptr;
    }

    void add_root(string name) {
        root = new Node(name);
    }

    void add_left(Node* parent, string name) {
        parent->left = new Node(name);
    }

    void add_right(Node* parent, string name) {
        parent->right = new Node(name);
    }

    void display_tree(Node* node) {
        if (node == nullptr) return;

        cout << "Node: " << node->name;
        cout << " | Left: " << (node->left ? node->left->name : "null");
        cout << " | Right: " << (node->right ? node->right->name : "null") << endl;

        display_tree(node->left);
        display_tree(node->right);
    }

    void collect_names(Node* node, vector<string>& names) {
        if (node == nullptr) return;
        names.push_back(node->name);
        collect_names(node->left, names);
        collect_names(node->right, names);
    }

    int binary_search(vector<string>& arr, string target) {
        int left = 0, right = arr.size() - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (arr[mid] == target) return mid;
            else if (arr[mid] < target) left = mid + 1;
            else right = mid - 1;
        }
        return -1;
    }
};

int main() {
    Tree tree;

    tree.add_root("A");
    Node* A = tree.root;

    tree.add_left(A, "B");
    tree.add_right(A, "C");
    Node* B = A->left;
    Node* C = A->right;

    tree.add_left(B, "D");
    tree.add_right(B, "E");
    tree.add_left(C, "F");
    tree.add_right(C, "G");

    tree.display_tree(tree.root);

    vector<string> names;
    tree.collect_names(tree.root, names);

    sort(names.begin(), names.end()); // Required for binary search

    string target = "E";
    int index = tree.binary_search(names, target);

    cout << "\nBinary Search Result:\n";
    if (index != -1)
        cout << "Found \"" << target << "\" at sorted index " << index << ".\n";
    else
        cout << "\"" << target << "\" not found in the tree.\n";

    return 0;
}
